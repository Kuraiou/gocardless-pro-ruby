require_relative './base_service'



# encoding: utf-8
#
# WARNING: Do not edit by hand, this file was generated by Crank:
#
#   https://github.com/gocardless/crank

module GoCardless
  module Services
    class CustomerBankAccountService < BaseService

    
      

            # Creates a new bank account object associated to a customer id.
    # 
   
    # # There are three different ways to supply bank account details:
    # 
  
    #  # - [Local
    # details](https://developer.gocardless.com/pro/#ui-compliance-local-bank-details)

    #    # 
    # - IBAN
    # 
    # - [Customer Bank Account
    # Tokens](https://developer.gocardless.com/pro/#js-flow-create-a-customer-bank-account-token)

    #    # 
    # For more information on the different fields required in each
    # country, see [local bank
    # details](https://developer.gocardless.com/pro/#ui-compliance-local-bank-details).
        # Example URL: /customer_bank_accounts
        # @param options: any query parameters, in the form of a hash
        def create(
          options = {}
        )
        path = nil
        
          path = "/customer_bank_accounts"
        

        response = make_request(:post, path, options)
        
          Resources::CustomerBankAccount.new(unenvelope_body(response.body))
        
        end

        
        
      

            # Returns a
    # [cursor-paginated](https://developer.gocardless.com/pro/#overview-cursor-pagination)
    # list of your bank accounts.
        # Example URL: /customer_bank_accounts
        # @param options: any query parameters, in the form of a hash
        def list(
          options = {}
        )
        path = nil
        
          path = "/customer_bank_accounts"
        

        response = make_request(:get, path, options)
        
          ListResponse.new(
            raw_response: response,
            unenveloped_body: unenvelope_body(response.body),
            resource_class: Resources::CustomerBankAccount
          )
        
        end

        
        def all(options = {})
          Paginator.new(
            service: self,
            path: "/customer_bank_accounts",
            options: options
          ).enumerator
        end
        
        
      

            # Retrieves the details of an existing bank account.
        # Example URL: /customer_bank_accounts/:identity
        #
        # @param identity:       # Unique identifier, beginning with "BA" }}
        # @param options: any query parameters, in the form of a hash
        def get(
          identity, options = {}
        )
        path = nil
        
          path = sub_url("/customer_bank_accounts/:identity", { 
            "identity" => identity
          })
        

        response = make_request(:get, path, options)
        
          Resources::CustomerBankAccount.new(unenvelope_body(response.body))
        
        end

        
        
      

            # Updates a customer bank account object. Only the metadata parameter is
    # allowed.
        # Example URL: /customer_bank_accounts/:identity
        #
        # @param identity:       # Unique identifier, beginning with "BA" }}
        # @param options: any query parameters, in the form of a hash
        def update(
          identity, options = {}
        )
        path = nil
        
          path = sub_url("/customer_bank_accounts/:identity", { 
            "identity" => identity
          })
        

        response = make_request(:put, path, options)
        
          Resources::CustomerBankAccount.new(unenvelope_body(response.body))
        
        end

        
        
      

            # Immediately cancels all associated mandates and cancellable payments.
   
    # # 
    # This will return a `disable_failed` error if the bank account has
    # already been disabled.
    # 
    # A disabled bank account can be
    # re-enabled by creating a new bank account resource with the same details.
        # Example URL: /customer_bank_accounts/:identity/actions/disable
        #
        # @param identity:       # Unique identifier, beginning with "BA" }}
        # @param options: any query parameters, in the form of a hash
        def disable(
          identity, options = {}
        )
        path = nil
        
          path = sub_url("/customer_bank_accounts/:identity/actions/disable", { 
            "identity" => identity
          })
        

        response = make_request(:post, path, options)
        
          Resources::CustomerBankAccount.new(unenvelope_body(response.body))
        
        end

        
        

        def unenvelope_body(body)
          body[envelope_key] || body["data"]
        end

        private

        def envelope_key
          "customer_bank_accounts"
        end

        def sub_url(url, param_map)
          param_map.reduce(url) do |new_url, (param, value)|
            new_url.gsub(":#{param}", value)
          end
        end
    end
  end
end

