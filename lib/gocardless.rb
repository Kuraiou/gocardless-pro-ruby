# encoding: utf-8
#
# WARNING: Do not edit by hand, this file was generated by Crank:
#
#   https://github.com/gocardless/crank
#

require 'json'
require 'zlib'
require 'active_support/inflector'
require 'faraday'
require 'time'
require 'active_support/core_ext/hash/indifferent_access'

require 'uri'

module GoCardless
end

version_file = 'gocardless/version'

if File.file? File.expand_path("#{version_file}.rb", File.dirname(__FILE__))
  require_relative version_file
else
  GoCardless::VERSION = ''
end

require_relative 'gocardless/api_service'
require_relative 'gocardless/list_response'
require_relative 'gocardless/error'
require_relative 'gocardless/error/validation_error'
require_relative 'gocardless/error/gocardless_error'
require_relative 'gocardless/error/invalid_api_usage_error'
require_relative 'gocardless/error/invalid_state_error'
require_relative 'gocardless/paginator'
require_relative 'gocardless/request'
require_relative 'gocardless/response'

require_relative 'gocardless/resources/api_key'
require_relative 'gocardless/services/api_key_service'

require_relative 'gocardless/resources/creditor'
require_relative 'gocardless/services/creditor_service'

require_relative 'gocardless/resources/creditor_bank_account'
require_relative 'gocardless/services/creditor_bank_account_service'

require_relative 'gocardless/resources/customer'
require_relative 'gocardless/services/customer_service'

require_relative 'gocardless/resources/customer_bank_account'
require_relative 'gocardless/services/customer_bank_account_service'

require_relative 'gocardless/resources/event'
require_relative 'gocardless/services/event_service'

require_relative 'gocardless/resources/helper'
require_relative 'gocardless/services/helper_service'

require_relative 'gocardless/resources/mandate'
require_relative 'gocardless/services/mandate_service'

require_relative 'gocardless/resources/payment'
require_relative 'gocardless/services/payment_service'

require_relative 'gocardless/resources/payout'
require_relative 'gocardless/services/payout_service'

require_relative 'gocardless/resources/publishable_api_key'
require_relative 'gocardless/services/publishable_api_key_service'

require_relative 'gocardless/resources/redirect_flow'
require_relative 'gocardless/services/redirect_flow_service'

require_relative 'gocardless/resources/refund'
require_relative 'gocardless/services/refund_service'

require_relative 'gocardless/resources/role'
require_relative 'gocardless/services/role_service'

require_relative 'gocardless/resources/subscription'
require_relative 'gocardless/services/subscription_service'

require_relative 'gocardless/resources/user'
require_relative 'gocardless/services/user_service'

module GoCardless
  # A class for working with and talking to the GoCardless API
  class Client
    extend Forwardable

    # Access to the service for api_key to make API calls
    def api_keys
      @api_keys ||= Services::ApiKeyService.new(@api_service)
    end

    # Access to the service for creditor to make API calls
    def creditors
      @creditors ||= Services::CreditorService.new(@api_service)
    end

    # Access to the service for creditor_bank_account to make API calls
    def creditor_bank_accounts
      @creditor_bank_accounts ||= Services::CreditorBankAccountService.new(@api_service)
    end

    # Access to the service for customer to make API calls
    def customers
      @customers ||= Services::CustomerService.new(@api_service)
    end

    # Access to the service for customer_bank_account to make API calls
    def customer_bank_accounts
      @customer_bank_accounts ||= Services::CustomerBankAccountService.new(@api_service)
    end

    # Access to the service for event to make API calls
    def events
      @events ||= Services::EventService.new(@api_service)
    end

    # Access to the service for helper to make API calls
    def helpers
      @helpers ||= Services::HelperService.new(@api_service)
    end

    # Access to the service for mandate to make API calls
    def mandates
      @mandates ||= Services::MandateService.new(@api_service)
    end

    # Access to the service for payment to make API calls
    def payments
      @payments ||= Services::PaymentService.new(@api_service)
    end

    # Access to the service for payout to make API calls
    def payouts
      @payouts ||= Services::PayoutService.new(@api_service)
    end

    # Access to the service for publishable_api_key to make API calls
    def publishable_api_keys
      @publishable_api_keys ||= Services::PublishableApiKeyService.new(@api_service)
    end

    # Access to the service for redirect_flow to make API calls
    def redirect_flows
      @redirect_flows ||= Services::RedirectFlowService.new(@api_service)
    end

    # Access to the service for refund to make API calls
    def refunds
      @refunds ||= Services::RefundService.new(@api_service)
    end

    # Access to the service for role to make API calls
    def roles
      @roles ||= Services::RoleService.new(@api_service)
    end

    # Access to the service for subscription to make API calls
    def subscriptions
      @subscriptions ||= Services::SubscriptionService.new(@api_service)
    end

    # Access to the service for user to make API calls
    def users
      @users ||= Services::UserService.new(@api_service)
    end

    # Get a Client configured to use HTTP Basic authentication with the GC Api
    #
    # @param options [Hash<Symbol,String>] configuration for creating the client
    # @option options [Symbol] :environment the environment to connect to - one of `:live` or `:sandbox`.
    # @option options [Symbol] :api_key the ID of the API Key
    # @option options [Symbol] :api_secret the key of the API Key
    # @return [Client] A client configured to use the API with HTTP Basic
    #   authentication.
    #
    def initialize(options)
      environment = options.delete(:environment) || :live
      api_key = options.delete(:api_key) || fail('No API key ID given to GoCardless Client')
      api_secret = options.delete(:api_secret) || fail('No API secret given to GoCardless Client')
      options = custom_options(options)
      @api_service = ApiService.new(
        url_for_environment(environment), api_key, api_secret, options)
    end

    private

    def url_for_environment(environment)
      if environment === :live
        'https://api.gocardless.com'
      elsif environment === :sandbox
        'https://api-sandbox.gocardless.com'
      else
        fail "Unknown environment key: #{environment}"
      end
    end

    # Get customized options.
    def custom_options(options)
      return default_options if options.nil?

      return default_options.merge(options) unless options[:default_headers]

      opts = default_options.merge(options)
      opts[:default_headers] = default_options[:default_headers].merge(options[:default_headers])

      opts
    end

    # Get the default options.
    def default_options
      {
        default_headers: {
          'GoCardless-Version' => '2014-11-03',
          'User-Agent' => "#{user_agent}",
          'Content-Type' => 'application/json'
        }
      }
    end

    def user_agent
      @user_agent ||=
        begin
          gem_name = 'gocardless'
          gem_info = "#{gem_name}"
          gem_info += "/v#{ GoCardless::VERSION}" if defined?(GoCardless::VERSION)
          ruby_engine = defined?(RUBY_ENGINE) ? RUBY_ENGINE : 'ruby'
          ruby_version = RUBY_VERSION
          ruby_version += " p#{RUBY_PATCHLEVEL}" if defined?(RUBY_PATCHLEVEL)
          comment = ["#{ruby_engine} #{ruby_version}"]
          comment << "gocardless v#{ GoCardless::VERSION}"
          comment << "faraday v#{Faraday::VERSION}"
          comment << RUBY_PLATFORM if defined?(RUBY_PLATFORM)
          "#{gem_info} (#{comment.join('; ')})"
        end
    end
  end
end
