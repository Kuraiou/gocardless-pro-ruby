require_relative './base_service'

# encoding: utf-8
#
# WARNING: Do not edit by hand, this file was generated by Crank:
#
#   https://github.com/gocardless/crank

module GoCardlessPro
  module Services
    # Service for making requests to the ModulusCheck endpoints
    class ModulusChecksService < BaseService
      # Performs a modulus check.
      #
      # Bank account details may either be supplied
      # using the IBAN (international bank account number), or [local
      # details](#ui-compliance-local-bank-details). For more information on the
      # different fields required in each country, please see the [local bank
      # details](#ui-compliance-local-bank-details) section.
      # Example URL: /modulus_checks
      # @param options [Hash] parameters as a hash, under a params key.
      def create(options = {})
        path = '/modulus_checks'

        params = options.delete(:params) || {}
        options[:params] = {}
        options[:params][envelope_key] = params
        response = make_request(:post, path, options)

        return if response.body.nil?
        Resources::ModulusCheck.new(unenvelope_body(response.body))
      end

      # Unenvelope the response of the body using the service's `envelope_key`
      #
      # @param body [Hash]
      def unenvelope_body(body)
        body[envelope_key] || body['data']
      end

      private

      # return the key which API responses will envelope data under
      def envelope_key
        'modulus_checks'
      end

      # take a URL with placeholder params and substitute them out for the acutal value
      # @param url [String] the URL with placeholders in
      # @param param_map [Hash] a hash of placeholders and their actual values
      def sub_url(url, param_map)
        param_map.reduce(url) do |new_url, (param, value)|
          new_url.gsub(":#{param}", value)
        end
      end
    end
  end
end
